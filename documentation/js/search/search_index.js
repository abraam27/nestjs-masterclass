var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.789,1,3.07,2,1.465,3,0.53,4,0.456,5,0.456,6,3.338,7,0.648,8,0.039,9,0.972,10,2.634,11,3.338,12,0.53,13,0.026,14,2.232,15,1.797,16,0.032,17,0.032]],["title/modules/AppModule.html",[18,1.083,19,1.858]],["body/modules/AppModule.html",[1,2.852,2,1.461,3,0.388,4,0.334,5,0.334,7,0.698,8,0.039,9,0.711,10,2.631,11,2.44,12,0.388,13,0.019,16,0.026,17,0.026,18,1.663,19,3.598,20,1.313,21,1.313,22,1.631,23,1.631,24,1.313,25,2.533,26,1.631,27,2.44,28,2.44,29,2.44,30,2.631,31,2.939,32,2.366,33,2.225,34,1.631,35,1.631,36,2.963,37,2.506,38,2.963,39,2.963,40,2.963,41,2.44]],["title/injectables/AppService.html",[10,1.477,42,1.083]],["body/injectables/AppService.html",[3,0.509,4,0.438,5,0.438,7,0.509,8,0.038,9,0.934,10,2.379,12,0.509,13,0.025,16,0.031,17,0.031,42,1.745,43,2.143,44,3.205,45,0.747,46,2.14,47,5.489,48,1.037,49,3.893,50,1.725,51,1.931,52,1.725,53,3.893,54,3.893]],["title/controllers/AuthController.html",[0,1.083,55,1.858]],["body/controllers/AuthController.html",[0,1.268,2,1.268,3,0.459,4,0.395,5,0.395,7,0.655,8,0.039,9,0.841,12,0.459,13,0.023,14,1.931,15,1.555,16,0.029,17,0.029,45,0.674,46,2.004,48,0.935,50,1.555,52,1.555,55,2.803,56,2.888,57,2.48,58,3.508,59,2.754,60,4.351,61,1.403,62,3.508,63,2.218,64,2.888,65,2.48,66,1.555,67,3.508,68,3.508,69,3.508,70,3.508,71,2.48]],["title/modules/AuthModule.html",[18,1.083,30,1.477]],["body/modules/AuthModule.html",[2,1.545,3,0.421,4,0.362,5,0.362,7,0.669,8,0.039,9,0.772,12,0.421,13,0.021,16,0.028,17,0.028,18,1.734,20,1.427,21,1.427,22,1.772,23,1.772,24,1.427,25,2.642,26,2.642,30,2.75,32,1.894,33,2.353,34,1.772,35,1.772,37,1.996,55,2.975,63,2.606,64,2.651,72,2.651,73,2.651,74,2.651,75,3.22,76,2.65,77,3.22,78,2.651]],["title/injectables/AuthService.html",[42,1.083,63,1.329]],["body/injectables/AuthService.html",[3,0.375,4,0.323,5,0.323,7,0.517,8,0.039,9,0.687,12,0.375,13,0.019,15,1.27,16,0.026,17,0.026,42,1.428,43,1.577,45,0.55,46,1.751,48,1.205,50,1.751,51,2.266,52,1.751,59,2.909,60,3.252,63,1.751,76,1.776,79,2.359,80,4.874,81,2.793,82,2.359,83,2.166,84,2.866,85,2.175,86,2.175,87,1.167,88,1.58,89,2.866,90,2.866,91,3.951,92,3.722,93,2.489,94,2.866,95,1.776,96,2.359,97,2.359,98,2.359,99,2.359,100,1.776,101,1.412,102,2.866,103,2.866,104,2.866,105,2.359]],["title/classes/CreatePostDto.html",[13,0.019,106,1.477]],["body/classes/CreatePostDto.html",[3,0.155,4,0.134,5,0.134,7,0.482,8,0.039,12,0.155,13,0.017,16,0.013,17,0.013,45,0.228,48,1.181,51,1.905,61,1.772,66,0.527,87,1.542,88,1.866,105,3.035,106,0.987,107,0.527,108,3.221,109,0.84,110,1.15,111,3.035,112,2.595,113,2.595,114,3.391,115,2.595,116,3.4,117,3.229,118,2.403,119,3.4,120,2.799,121,2.799,122,2.439,123,2.963,124,3.686,125,1.188,126,1.188,127,2.003,128,2.003,129,3.046,130,1.188,131,1.188,132,1.888,133,1.188,134,1.416,135,1.649,136,1.649,137,2.003,138,1.188,139,1.971,140,2.403,141,3.686,142,1.188,143,1.188,144,1.188,145,2.003,146,1.241,147,1.649,148,1.649,149,1.188,150,1.188,151,3.046,152,2.508,153,2.003,154,2.003,155,1.188,156,1.188,157,2.003,158,2.003,159,1.188,160,1.188,161,1.649,162,1.188,163,3.046,164,3.046,165,1.649,166,2.003,167,2.003,168,2.003,169,2.003,170,2.003,171,1.188,172,2.799,173,2.137,174,1.649,175,1.649,176,1.188,177,1.188,178,1.188,179,1.188,180,3.046,181,1.188,182,1.188,183,1.188,184,2.595,185,1.188,186,2.003,187,2.003,188,1.872,189,2.772,190,2.553,191,2.003,192,0.84,193,0.84,194,2.003,195,0.586,196,1.188,197,1.188,198,0.737,199,0.737,200,1.188,201,2.799,202,3.229,203,1.188,204,2.003,205,1.188,206,1.188,207,1.188,208,1.188,209,1.188,210,1.188,211,1.188,212,1.188,213,0.978,214,1.188,215,2.137,216,2.003,217,2.003,218,1.834]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.019,132,1.858]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.463,4,0.399,5,0.399,7,0.463,8,0.038,12,0.463,13,0.029,16,0.029,17,0.029,45,0.68,48,1.212,51,1.819,61,1.819,87,1.343,107,1.569,108,3.552,110,2.016,122,2.227,132,2.82,140,3.552,188,2.919,190,2.82,195,1.744,215,4.137,218,3.552,219,2.915,220,3.54,221,3.54,222,3.54]],["title/classes/CreateUserDto.html",[13,0.019,223,1.65]],["body/classes/CreateUserDto.html",[3,0.349,4,0.301,5,0.301,7,0.349,8,0.038,12,0.349,13,0.024,16,0.024,17,0.024,45,0.513,48,1.259,51,2.168,61,1.89,87,1.396,88,1.504,92,3.584,95,2.699,107,1.183,110,1.667,165,3.096,188,2.602,189,2.658,190,2.93,192,1.887,193,1.887,195,1.315,213,3.096,223,2.07,224,4.102,225,1.887,226,3.584,227,4.354,228,2.67,229,2.67,230,2.67,231,2.67,232,2.67,233,2.67,234,2.67,235,4.726,236,3.761,237,3.761,238,3.761,239,3.761,240,3.761,241,5.169,242,3.761,243,1.853,244,3.761,245,3.761,246,2.67,247,3.096,248,2.198,249,3.761,250,2.67,251,2.67]],["title/classes/GetUserParamDto.html",[13,0.019,252,1.65]],["body/classes/GetUserParamDto.html",[3,0.426,4,0.367,5,0.367,7,0.632,8,0.039,12,0.426,13,0.031,16,0.028,17,0.028,45,0.626,48,0.869,61,1.303,66,1.445,71,2.304,87,1.426,88,1.723,93,2.941,101,2.531,107,1.445,110,1.91,121,2.684,123,2.373,139,1.303,188,1.794,189,3.047,190,2.021,192,2.304,193,2.304,195,1.606,198,2.021,202,3.548,243,2.379,247,2.684,248,2.684,252,2.373,253,3.548,254,2.684,255,3.047,256,3.26,257,3.26,258,3.548]],["title/classes/PatchPostDto.html",[13,0.019,259,1.65]],["body/classes/PatchPostDto.html",[3,0.403,4,0.347,5,0.347,7,0.686,8,0.039,12,0.403,13,0.03,16,0.027,17,0.027,45,0.591,48,0.821,61,1.232,66,1.365,71,2.177,87,1.386,93,2.886,100,2.573,106,1.517,107,1.365,109,2.177,110,1.839,117,3.416,122,1.839,123,2.284,139,1.232,161,2.536,188,2.284,195,1.517,198,1.909,199,1.909,201,3.416,243,2.312,258,3.416,259,2.284,260,3.416,261,3.416,262,3.864,263,4.15,264,3.416,265,3.08,266,3.08,267,2.177,268,2.177,269,2.177,270,2.536]],["title/classes/PatchUserDto.html",[13,0.019,271,1.858]],["body/classes/PatchUserDto.html",[3,0.507,4,0.436,5,0.436,7,0.63,8,0.038,12,0.507,13,0.025,16,0.031,17,0.031,95,2.984,100,2.984,107,1.717,199,2.401,223,2.132,225,2.738,261,3.963,262,4.313,267,2.738,268,2.738,270,3.189,271,2.984,272,3.189,273,4.814,274,3.189]],["title/controllers/PostsController.html",[0,1.083,275,1.858]],["body/controllers/PostsController.html",[0,0.824,2,0.824,3,0.298,4,0.257,5,0.257,7,0.613,8,0.039,9,0.547,12,0.298,13,0.015,14,1.255,15,1.011,16,0.022,17,0.022,45,0.438,46,1.488,48,1.061,50,1.766,51,1.593,52,1.766,57,1.612,61,1.593,65,1.612,66,1.011,85,2.193,86,2.193,87,1.176,88,1.593,106,2.413,118,2.373,122,2.303,139,1.757,199,2.081,259,2.788,264,2.764,269,2.373,275,2.081,276,1.877,277,2.28,278,3.357,279,2.764,280,3.357,281,2.28,282,3.357,283,2.28,284,2.764,285,1.877,286,3.357,287,2.373,288,3.357,289,3.357,290,4.394,291,2.28,292,2.28,293,2.28,294,2.764,295,2.28,296,2.28,297,3.28,298,3.28,299,1.963,300,1.877,301,1.877,302,1.612,303,2.764,304,1.612,305,1.612,306,2.28,307,2.28,308,2.28,309,2.28,310,2.764,311,2.28,312,2.28,313,2.28,314,2.28,315,2.28,316,2.28]],["title/modules/PostsModule.html",[18,1.083,31,1.65]],["body/modules/PostsModule.html",[2,1.566,3,0.43,4,0.37,5,0.37,7,0.674,8,0.039,9,0.788,12,0.43,13,0.021,16,0.028,17,0.028,18,1.752,20,1.457,21,1.457,22,1.81,23,1.81,24,1.457,25,2.669,26,1.81,31,3.134,32,2.438,33,2.386,34,1.81,35,1.81,37,2.687,78,2.706,275,3.006,299,2.711,300,2.706,317,2.706,318,3.287,319,2.706,320,3.287,321,3.287]],["title/injectables/PostsService.html",[42,1.083,299,1.477]],["body/injectables/PostsService.html",[3,0.314,4,0.27,5,0.27,7,0.589,8,0.039,9,0.575,12,0.314,13,0.016,14,1.321,15,1.063,16,0.023,17,0.023,42,1.259,43,1.321,45,0.461,46,1.544,48,1.199,50,1.818,51,1.64,52,1.818,59,2.958,81,1.696,82,1.975,83,1.994,85,2.478,86,2.478,87,1.329,88,1.8,93,1.321,96,1.975,100,1.487,101,2.021,106,2.535,111,3.706,120,3.706,243,2.021,259,2.958,269,2.463,279,2.868,284,1.975,285,2.868,299,1.717,304,1.696,305,1.696,322,1.975,323,2.868,324,3.484,325,2.399,326,2.399,327,3.484,328,2.399,329,3.484,330,2.399,331,2.399,332,3.706,333,3.484]],["title/controllers/UsersController.html",[0,1.083,334,1.858]],["body/controllers/UsersController.html",[0,1.134,2,0.563,3,0.204,4,0.175,5,0.175,7,0.55,8,0.039,9,0.374,12,0.204,13,0.01,14,0.858,15,0.69,16,0.016,17,0.016,45,0.299,46,1.109,48,0.836,50,2.242,52,1.743,57,1.101,59,2.608,61,1.254,65,1.101,66,0.69,83,1.254,85,1.727,86,2.166,87,1.304,88,1.254,101,2.447,118,1.101,122,1.39,123,1.977,134,2.97,135,2.957,136,2.957,139,1.765,146,2.936,223,2.608,243,2.493,252,2.43,255,2.97,271,2.936,274,2.06,287,2.539,294,2.06,297,2.06,298,2.06,301,1.283,302,3.121,303,2.582,304,1.101,305,1.101,310,1.283,334,1.551,335,1.283,336,4.232,337,2.06,338,2.06,339,2.06,340,2.503,341,3.137,342,2.503,343,1.558,344,1.558,345,2.503,346,1.558,347,3.635,348,1.558,349,3.459,350,1.558,351,1.558,352,1.558,353,2.503,354,1.558,355,1.558,356,1.558,357,2.503,358,1.558,359,1.558,360,1.558,361,1.558,362,1.558,363,3.137,364,1.558,365,1.558,366,1.283,367,1.283,368,1.283,369,3.137,370,1.558,371,1.558,372,1.558,373,1.558,374,1.558,375,1.558,376,1.558,377,1.558,378,1.558,379,1.558,380,1.558]],["title/modules/UsersModule.html",[18,1.083,32,1.329]],["body/modules/UsersModule.html",[2,1.545,3,0.421,4,0.362,5,0.362,7,0.669,8,0.039,9,0.772,12,0.421,13,0.021,16,0.028,17,0.028,18,1.734,20,1.427,21,1.427,22,1.772,23,1.772,24,1.427,25,2.642,26,2.642,30,2.106,32,2.474,33,2.353,34,1.772,35,1.772,37,1.996,41,2.651,76,2.65,83,2.352,334,2.975,368,2.651,381,2.651,382,2.651,383,2.651,384,3.22,385,3.22]],["title/injectables/UsersService.html",[42,1.083,83,1.199]],["body/injectables/UsersService.html",[3,0.27,4,0.232,5,0.232,7,0.491,8,0.04,9,0.495,12,0.27,13,0.013,15,0.915,16,0.02,17,0.02,42,1.126,43,1.136,45,0.396,46,1.381,48,1,50,2.236,51,1.795,52,1.381,59,2.599,63,1.99,76,1.279,81,2.956,83,1.246,85,2.067,86,2.067,87,1.109,88,1.501,93,2.302,95,2.593,97,1.699,98,1.699,99,1.699,101,2.415,134,2.203,139,0.825,146,2.593,226,3.443,243,2.415,252,2.698,255,2.956,302,3.174,323,3.091,336,3.443,337,2.565,338,2.565,339,2.565,347,3.443,349,2.565,366,1.699,367,1.699,386,1.699,387,3.116,388,3.116,389,2.064,390,2.064,391,3.754,392,2.064,393,2.064,394,3.116,395,2.064,396,2.064,397,2.064,398,3.116,399,3.116,400,2.064,401,2.064,402,2.064]],["title/coverage.html",[403,2.88]],["body/coverage.html",[0,1.758,1,1.77,5,0.321,6,2.35,8,0.038,10,1.407,13,0.034,16,0.025,17,0.025,24,1.265,42,1.758,44,2.35,55,1.77,56,2.35,63,1.265,79,2.35,83,1.142,87,0.843,101,1.407,106,1.407,108,2.786,109,2.786,122,1.265,132,1.77,140,2.018,219,2.35,223,1.572,224,2.35,225,2.786,252,1.572,253,2.35,254,2.35,259,1.572,260,2.35,271,1.77,272,2.35,275,1.77,276,2.35,287,2.018,299,1.407,322,2.35,334,1.77,335,2.35,386,2.35,403,2.018,404,2.855,405,2.855,406,2.855,407,5.81,408,4.513,409,4.866,410,3.941,411,2.35,412,2.855,413,2.855,414,2.855,415,3.941,416,3.941,417,3.941,418,2.855,419,2.855]],["title/dependencies.html",[21,1.596,420,2.068]],["body/dependencies.html",[8,0.039,9,0.929,13,0.031,16,0.031,17,0.031,21,1.717,66,1.717,195,1.908,198,2.401,267,2.738,268,2.738,421,3.874,422,3.874,423,5.238,424,3.874,425,3.874,426,3.874,427,3.874,428,3.874,429,3.874,430,3.874,431,3.874,432,3.874,433,3.874,434,3.874,435,3.874]],["title/miscellaneous/enumerations.html",[436,1.557,437,2.965]],["body/miscellaneous/enumerations.html",[8,0.038,16,0.03,17,0.03,45,0.719,114,3.88,122,2.089,146,2.921,147,3.88,148,3.88,152,3.88,172,3.88,173,3.88,174,3.88,175,3.88,218,4.134,436,2.321,437,3.082,438,3.744,439,3.744,440,3.744,441,3.744]],["title/miscellaneous/functions.html",[436,1.557,442,2.965]],["body/miscellaneous/functions.html",[8,0.034,16,0.034,17,0.034,24,2.476,45,0.864,411,3.703,436,2.788,442,3.703,443,4.497]],["title/index.html",[45,0.482,444,2.512,445,2.512]],["body/index.html",[4,0.337,8,0.038,16,0.026,17,0.026,123,2.548,139,1.199,332,3.354,403,2.119,446,2.997,447,2.997,448,4.074,449,2.997,450,2.997,451,2.997,452,2.997,453,2.997,454,2.997,455,4.629,456,2.997,457,2.997,458,2.997,459,2.997,460,5.481,461,2.997,462,2.997,463,2.997,464,5.357,465,2.997,466,2.997,467,4.074,468,2.997,469,2.997,470,2.997,471,2.997,472,4.074,473,2.997,474,2.997,475,2.997,476,4.074,477,4.074,478,2.997,479,2.997,480,2.997,481,2.997,482,2.997,483,2.468,484,2.997,485,2.997,486,2.997,487,2.997,488,2.997,489,2.997,490,2.997,491,2.997,492,2.997,493,2.997,494,2.468,495,2.997,496,2.997,497,2.997,498,2.997,499,2.997,500,2.997,501,2.468]],["title/modules.html",[20,1.806]],["body/modules.html",[8,0.033,16,0.033,17,0.033,19,2.594,20,1.854,30,2.062,31,2.303,32,1.854,483,4.633,502,5.628,503,5.628,504,5.628]],["title/overview.html",[505,3.355]],["body/overview.html",[2,1.1,8,0.038,10,2.299,16,0.027,17,0.027,18,1.1,19,3.555,20,1.349,21,1.349,22,1.676,23,1.676,24,1.349,25,1.676,26,1.676,27,2.506,28,2.506,29,2.506,30,2.652,31,3.029,32,2.439,33,2.266,34,1.676,35,1.676,43,1.676,63,2.439,72,2.506,73,2.506,74,2.506,83,2.2,107,1.349,299,2.299,317,2.506,319,2.506,381,2.506,382,2.506,383,2.506,505,2.506,506,4.665,507,3.044]],["title/properties.html",[110,1.596,420,2.068]],["body/properties.html",[8,0.038,16,0.034,17,0.034,110,1.959,139,1.768,494,3.64,501,3.64,508,4.421,509,4.421,510,4.421]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":509,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":415,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t00:00:00.000z",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t00:00:00.000z'})@isiso8601()@isoptional",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.26",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":416,"title":{},"body":{"coverage.html":{}}}],["10})@apiquery({name",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{}}}],["123",{"_index":402,"title":{},"body":{"injectables/UsersService.html":{}}}],["1234",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{}}}],["1234'})@isnotempty()@isint()@type(undefined",{"_index":265,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":256,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["123456",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["2",{"_index":333,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.1.0",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":289,"title":{},"body":{"controllers/PostsController.html":{}}}],["2022",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":506,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":417,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":507,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":435,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["abraam",{"_index":398,"title":{},"body":{"injectables/UsersService.html":{}}}],["abraam@gmail.com",{"_index":399,"title":{},"body":{"injectables/UsersService.html":{}}}],["allposts",{"_index":278,"title":{},"body":{"controllers/PostsController.html":{}}}],["allposts(@param('userid",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["allposts(userid",{"_index":281,"title":{},"body":{"controllers/PostsController.html":{}}}],["amazing",{"_index":484,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":286,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{}}}],["apipropertyoptional({description",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{}}}],["apipropertyoptional({type",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('posts",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":462,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":454,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["authcontroller",{"_index":55,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":494,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":63,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["authservices",{"_index":391,"title":{},"body":{"injectables/UsersService.html":{}}}],["backers",{"_index":485,"title":{},"body":{"index.html":{}}}],["body",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":504,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":502,"title":{},"body":{"modules.html":{}}}],["building",{"_index":449,"title":{},"body":{"index.html":{}}}],["character",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":317,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":318,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":319,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":381,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":382,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":383,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["compodoc/compodoc",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["console.log(this.authservices.isauth",{"_index":397,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(user",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{}}}],["constructor",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservices",{"_index":389,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":403,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{}}}],["created",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{}}}],["created.'})@post",{"_index":291,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":279,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":285,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":106,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":132,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":345,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser",{"_index":340,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":343,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":223,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["date",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["defaultvaluepipe",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":463,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["draft",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["draft'})@isstring()@isnotempty()@isenum(poststatus",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dtos/create",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":473,"title":{},"body":{"index.html":{}}}],["each",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":450,"title":{},"body":{"index.html":{}}}],["eight",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"injectables/UsersService.html":{}}}],["enum",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":437,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":261,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["featured",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":323,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":392,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":327,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":388,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":394,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["firstname",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["forwardref",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":448,"title":{},"body":{"index.html":{}}}],["function",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":442,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":348,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":282,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":47,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":444,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":252,"title":{"classes/GetUserParamDto.html":{}},"body":{"classes/GetUserParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["getusers",{"_index":341,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":346,"title":{},"body":{"controllers/UsersController.html":{}}}],["grow",{"_index":480,"title":{},"body":{"index.html":{}}}],["handles",{"_index":337,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["headers",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":53,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":491,"title":{},"body":{"index.html":{}}}],["https://example.com/image.jpg",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://example.com/image.jpg'})@isstring()@isoptional()@isurl",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":498,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":45,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":42,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":43,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installation",{"_index":459,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":461,"title":{},"body":{"index.html":{}}}],["ip",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{}}}],["isenum",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":258,"title":{},"body":{"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isemail",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@minlength(8)@matches(/^(?=.*[a",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{}}}],["isstring",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{}}}],["isstring()@isnotempty",{"_index":220,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(10",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(10",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["join",{"_index":487,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":495,"title":{},"body":{"index.html":{}}}],["key",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["lastname",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":501,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":477,"title":{},"body":{"index.html":{}}}],["limit",{"_index":347,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["login",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(email",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{}}}],["matches(/^(?=.*[a",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxlength",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{}}}],["maxlength(10",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["methods",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{}}}],["minlength(3",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":436,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":476,"title":{},"body":{"index.html":{}}}],["mode",{"_index":467,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":490,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":496,"title":{},"body":{"index.html":{}}}],["name",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":455,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":500,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":267,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":287,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":447,"title":{},"body":{"index.html":{}}}],["npm",{"_index":460,"title":{},"body":{"index.html":{}}}],["number",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["omittype",{"_index":270,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["omittype(createpostdto",{"_index":263,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["omittype(createuserdto",{"_index":273,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["one",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":478,"title":{},"body":{"index.html":{}}}],["operations",{"_index":339,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["option",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":219,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":221,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":222,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":505,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":420,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":254,"title":{},"body":{"classes/GetUserParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:22",{"_index":257,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["parameters",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["partialtype",{"_index":262,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["password",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpost",{"_index":324,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpost(id",{"_index":329,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto",{"_index":259,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchuser",{"_index":342,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":271,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["person",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"}'})@isstring()@isoptional()@isjson",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["please",{"_index":488,"title":{},"body":{"index.html":{}}}],["post",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":288,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isnotempty()@isenum(posttype",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isnotempty()@minlength(4",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":269,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:105",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:137",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:17",{"_index":266,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:28",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:38",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:50",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:61",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:69",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:78",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:87",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:95",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":277,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":321,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":275,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":299,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":469,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":446,"title":{},"body":{"index.html":{}}}],["project",{"_index":479,"title":{},"body":{"index.html":{}}}],["properties",{"_index":110,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["put",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["read",{"_index":489,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":349,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["related",{"_index":338,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":458,"title":{},"body":{"index.html":{}}}],["required",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":464,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{}}}],["sara",{"_index":400,"title":{},"body":{"injectables/UsersService.html":{}}}],["sara@gmail.com",{"_index":401,"title":{},"body":{"injectables/UsersService.html":{}}}],["scalable",{"_index":451,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":452,"title":{},"body":{"index.html":{}}}],["service",{"_index":387,"title":{},"body":{"injectables/UsersService.html":{}}}],["side",{"_index":453,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["slug",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["small",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":255,"title":{},"body":{"classes/GetUserParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["sponsors",{"_index":482,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":443,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":438,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":439,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":44,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":396,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:17",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":411,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":260,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":440,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":441,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":276,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:13",{"_index":283,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:25",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:37",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":320,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":322,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:10",{"_index":328,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:26",{"_index":326,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:30",{"_index":330,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:7",{"_index":325,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":253,"title":{},"body":{"classes/GetUserParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":272,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts",{"_index":386,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:10",{"_index":390,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:27",{"_index":393,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:50",{"_index":395,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":335,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:61",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":344,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:85",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":384,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":465,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":468,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":470,"title":{},"body":{"index.html":{}}}],["started",{"_index":445,"title":{"index.html":{}},"body":{}}],["starter",{"_index":457,"title":{},"body":{"index.html":{}}}],["statements",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":492,"title":{},"body":{"index.html":{}}}],["story",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":290,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":483,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":503,"title":{},"body":{"modules.html":{}}}],["table",{"_index":419,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":418,"title":{},"body":{"coverage.html":{}}}],["tag1",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tag2",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tags",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["test",{"_index":332,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covsupport",{"_index":475,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":474,"title":{},"body":{"index.html":{}}}],["tests",{"_index":472,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":481,"title":{},"body":{"index.html":{}}}],["this.authservice.login('abraam@gmail.com",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.postsservice.createpost(createpostdto",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.patchpost(patchpostdto.id",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":331,"title":{},"body":{"injectables/PostsService.html":{}}}],["title",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["touch",{"_index":493,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["true",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":499,"title":{},"body":{"index.html":{}}}],["type",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["types",{"_index":268,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":456,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@isstring({each",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":471,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":510,"title":{},"body":{"properties.html":{}}}],["update",{"_index":264,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated.'})@patch",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost",{"_index":280,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{}}}],["url",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apiquery({name",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@apiresponse({status",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":274,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":284,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":336,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":385,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/providers/users.service",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":334,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":83,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["version",{"_index":508,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":466,"title":{},"body":{"index.html":{}}}],["website",{"_index":497,"title":{},"body":{"index.html":{}}}],["without",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["world",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":486,"title":{},"body":{"index.html":{}}}],["z0",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Get()\n  public login() {\n    return this.authService.login('abraam@gmail.com', '123456', '1234');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UsersService } from './../../users/providers/users.service';\nimport { forwardRef, Inject, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  public login(email: string, password: string, id: string) {\n    const user = this.usersService.findOneById('1234');\n    console.log(user);\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The content of the post', example: 'My First Post Content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The featured image url of the post', example: 'https://example.com/image.jpg'})@IsString()@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined, description: 'The meta options of the post', example: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'The type of the post and options are: post, page, story, series', example: 'post'})@IsNotEmpty()@IsEnum(PostType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The published on date of the post', example: '2022-01-01T00:00:00.000Z'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The schema of the post', example: '{\"@context\": \"https://schema.org\", \"@type\": \"Person\"}'})@IsString()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The slug of the post', example: 'my-first-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'The status of the post and options are: draft, scheduled, review, published', example: 'draft'})@IsString()@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The tags of the post', example: undefined})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The title of the post', example: 'My First Post'})@IsString()@IsNotEmpty()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/postType.enum';\nimport { PostStatus } from '../enums/postStatus.enum';\nimport { Type } from 'class-transformer';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'The title of the post',\n    example: 'My First Post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description:\n      'The type of the post and options are: post, page, story, series',\n    example: 'post',\n  })\n  @IsNotEmpty()\n  @IsEnum(PostType)\n  postType: PostType;\n\n  @ApiProperty({\n    description: 'The slug of the post',\n    example: 'my-first-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description:\n      'The status of the post and options are: draft, scheduled, review, published',\n    example: 'draft',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'The content of the post',\n    example: 'My First Post Content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description: 'The schema of the post',\n    example: '{\"@context\": \"https://schema.org\", \"@type\": \"Person\"}',\n  })\n  @IsString()\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'The featured image url of the post',\n    example: 'https://example.com/image.jpg',\n  })\n  @IsString()\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The published on date of the post',\n    example: '2022-01-01T00:00:00.000Z',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishedOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'The tags of the post',\n    example: ['tag1', 'tag2'],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description: 'The key of the meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'The value of the meta option',\n          example: true,\n        },\n      },\n    },\n    description: 'The meta options of the post',\n    example: [\n      {\n        key: ' sidebarEnabled',\n        value: true,\n      },\n    ],\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(10)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(10)\n  lastName?: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamDto.html":{"url":"classes/GetUserParamDto.html","title":"class - GetUserParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get User with a specific ID', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user-param.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsInt,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class GetUserParamDto {\n  @ApiPropertyOptional({\n    description: 'Get User with a specific ID',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreatePostDto, ['slug'] as const),\n)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post to update', example: '1234'})@IsNotEmpty()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {} from '@nestjs/mapped-types';\nimport { CreatePostDto } from './create-post.dto';\nimport { ApiProperty, OmitType, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class PatchPostDto extends PartialType(\n  OmitType(CreatePostDto, ['slug'] as const),\n) {\n  @ApiProperty({\n    description: 'The ID of the post to update',\n    example: '1234',\n  })\n  @IsNotEmpty()\n  @IsInt()\n  @Type(() => Number)\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  OmitType(CreateUserDto, ['email'] as const),\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(\n  OmitType(CreateUserDto, ['email'] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                allPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        allPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    allPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new post'})@ApiResponse({status: 201, description: 'The post has been successfully created.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a post'})@ApiResponse({status: 200, description: 'The post has been successfully updated.'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiTags, ApiResponse, ApiOperation } from '@nestjs/swagger';\nimport { PostsService } from './providers/posts.service';\nimport { Body, Controller, Get, Param, Post, Patch } from '@nestjs/common';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/:userId?')\n  allPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @ApiOperation({\n    summary: 'Create a new post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'The post has been successfully created.',\n  })\n  @Post()\n  createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.createPost(createPostDto);\n  }\n\n  @ApiOperation({\n    summary: 'Update a post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The post has been successfully updated.',\n  })\n  @Patch()\n  updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.patchPost(patchPostDto.id, patchPostDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPost\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                patchPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CreatePostDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        patchPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchPost(id: number, patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchPostDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreatePostDto } from '../dtos/create-post.dto';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\nimport { UsersService } from './../../users/providers/users.service';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly usersService: UsersService) {}\n\n  public findAll(userId: string) {\n    const user = this.usersService.findOneById(userId);\n    return [\n      {\n        user,\n        title: 'test title',\n        content: 'test content',\n      },\n      {\n        user,\n        title: 'test title 2',\n        content: 'test content 2',\n      },\n    ];\n  }\n\n  public createPost(createPostDto: CreatePostDto) {\n    return createPostDto;\n  }\n\n  public patchPost(id: number, patchPostDto: PatchPostDto) {\n    return patchPostDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Users controller\nHandles all user related operations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:75\n                        \n                    \n\n\n            \n                \n                        Creates a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CreateUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUserParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Returns an array of registered users or a specific user'})@ApiResponse({status: 200, description: 'Returns an array of registered users or a specific user'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The Number of users to return', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The Page of users', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Returns an array of registered users or a specific user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:85\n                        \n                    \n\n\n            \n                \n                        Updates a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Put,\n  Delete,\n  Param,\n  Query,\n  Body,\n  Ip,\n  Headers,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUserParamDto } from './dtos/get-user-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiTags, ApiQuery, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n/**\n * Users controller\n * Handles all user related operations\n */\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Returns an array of registered users or a specific user\n   * @param getUserParamDto \n   * @param limit \n   * @param page \n   * @returns \n   */\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Returns an array of registered users or a specific user',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Returns an array of registered users or a specific user',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The Number of users to return',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'The Page of users',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUserParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  /**\n   * Creates a new user\n   * @param createUserDto \n   * @returns \n   */\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    return createUserDto;\n  }\n\n  /**\n   * Updates a user\n   * @param patchUserDto \n   * @returns \n   */\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthModule } from './../auth/auth.module';\nimport { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Users service\nHandles all user related operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authServices: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authServices\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUserParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Returns an array of registered users or a specific user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Returns a specific user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUserParamDto } from '../dtos/get-user-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n/**\n * Users service\n * Handles all user related operations\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor\n   * @param authServices\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authServices: AuthService,\n  ) {}\n\n  /**\n   * Returns an array of registered users or a specific user\n   * @param getUserParamDto\n   * @param limit\n   * @param page\n   * @returns\n   */\n  public findAll(\n    getUserParamDto: GetUserParamDto,\n    limit: number,\n    page: number,\n  ) {\n    console.log(this.authServices.isAuth());\n    return [\n      {\n        firstName: 'Abraam',\n        email: 'abraam@gmail.com',\n      },\n      {\n        firstName: 'Sara',\n        email: 'sara@gmail.com',\n      },\n    ];\n  }\n\n  /**\n   * Returns a specific user\n   * @param id\n   * @returns\n   */\n  public findOneById(id: string) {\n    return {\n      id: 123,\n      firstName: 'Abraam',\n      email: 'abraam@gmail.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user-param.dto.ts\n            \n            class\n            GetUserParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (4/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
